name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npm run prisma:generate
      
    - name: Run database migrations
      run: npm run prisma:migrate:deploy
      env:
        DATABASE_URI: ${{ secrets.DATABASE_URI }}
        
    - name: Build application
      run: npm run build
      env:
        DATABASE_URI: ${{ secrets.DATABASE_URI }}
        PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
        NEXT_PUBLIC_ENABLE_HOST_MW: ${{ secrets.NEXT_PUBLIC_ENABLE_HOST_MW }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
        S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        
    # Vercel deployment example
    - name: Deploy to Vercel
      if: ${{ vars.DEPLOY_TARGET == 'vercel' }}
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
    # AWS Amplify deployment example
    - name: Deploy to AWS Amplify
      if: ${{ vars.DEPLOY_TARGET == 'amplify' }}
      run: |
        npm install -g @aws-amplify/cli
        amplify publish --yes
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        
    # Docker deployment example
    - name: Build and push Docker image
      if: ${{ vars.DEPLOY_TARGET == 'docker' }}
      run: |
        docker build -t ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:${{ github.sha }} .
        docker tag ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:${{ github.sha }} ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:latest
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login ${{ vars.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:${{ github.sha }}
        docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}:latest
        
    # Custom server deployment example (SSH)
    - name: Deploy to custom server
      if: ${{ vars.DEPLOY_TARGET == 'custom' }}
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /var/www/kimuraya-front
          git pull origin main
          npm ci
          npm run prisma:migrate:deploy
          npm run build
          pm2 restart kimuraya-front

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npm run prisma:generate
      
    - name: Build application
      run: npm run build
      env:
        DATABASE_URI: ${{ secrets.STAGING_DATABASE_URI }}
        PAYLOAD_SECRET: ${{ secrets.STAGING_PAYLOAD_SECRET }}
        NEXT_PUBLIC_ENABLE_HOST_MW: ${{ secrets.STAGING_NEXT_PUBLIC_ENABLE_HOST_MW }}
        
    # Add staging deployment steps here based on your infrastructure